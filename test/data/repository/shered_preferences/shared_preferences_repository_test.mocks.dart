// Mocks generated by Mockito 5.4.5 from annotations
// in food_limmit_controller/test/data/repository/shered_preferences/shared_preferences_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;

import 'shared_preferences_repository_test.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MockSharedPreferencesAsync].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockSharedPreferencesAsync extends _i1.Mock
    implements _i2.MockSharedPreferencesAsync {
  @override
  _i3.Future<Set<String>> getKeys({Set<String>? allowList}) =>
      (super.noSuchMethod(
            Invocation.method(#getKeys, [], {#allowList: allowList}),
            returnValue: _i3.Future<Set<String>>.value(<String>{}),
            returnValueForMissingStub: _i3.Future<Set<String>>.value(
              <String>{},
            ),
          )
          as _i3.Future<Set<String>>);

  @override
  _i3.Future<Map<String, Object?>> getAll({Set<String>? allowList}) =>
      (super.noSuchMethod(
            Invocation.method(#getAll, [], {#allowList: allowList}),
            returnValue: _i3.Future<Map<String, Object?>>.value(
              <String, Object?>{},
            ),
            returnValueForMissingStub: _i3.Future<Map<String, Object?>>.value(
              <String, Object?>{},
            ),
          )
          as _i3.Future<Map<String, Object?>>);

  @override
  _i3.Future<bool?> getBool(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getBool, [key]),
            returnValue: _i3.Future<bool?>.value(),
            returnValueForMissingStub: _i3.Future<bool?>.value(),
          )
          as _i3.Future<bool?>);

  @override
  _i3.Future<int?> getInt(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getInt, [key]),
            returnValue: _i3.Future<int?>.value(),
            returnValueForMissingStub: _i3.Future<int?>.value(),
          )
          as _i3.Future<int?>);

  @override
  _i3.Future<double?> getDouble(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getDouble, [key]),
            returnValue: _i3.Future<double?>.value(),
            returnValueForMissingStub: _i3.Future<double?>.value(),
          )
          as _i3.Future<double?>);

  @override
  _i3.Future<String?> getString(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getString, [key]),
            returnValue: _i3.Future<String?>.value(),
            returnValueForMissingStub: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<List<String>?> getStringList(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getStringList, [key]),
            returnValue: _i3.Future<List<String>?>.value(),
            returnValueForMissingStub: _i3.Future<List<String>?>.value(),
          )
          as _i3.Future<List<String>?>);

  @override
  _i3.Future<bool> containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: _i3.Future<bool>.value(false),
            returnValueForMissingStub: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> setBool(String? key, bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#setBool, [key, value]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setInt(String? key, int? value) =>
      (super.noSuchMethod(
            Invocation.method(#setInt, [key, value]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setDouble(String? key, double? value) =>
      (super.noSuchMethod(
            Invocation.method(#setDouble, [key, value]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setString(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#setString, [key, value]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(
            Invocation.method(#setStringList, [key, value]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> remove(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> clear({Set<String>? allowList}) =>
      (super.noSuchMethod(
            Invocation.method(#clear, [], {#allowList: allowList}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
